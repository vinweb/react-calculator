{"version":3,"sources":["Button.js","Operation.js","App.js","serviceWorker.js","index.js"],"names":["Button","className","onClick","e","props","digit","this","React","Component","Operation","opera","Counter","state","count","number","numberConcat","bind","operation","subtract","zero","clear","equals","decimal","regexEndDigit","regexNotDigit","regexEndOperation","regexEndOperationSub","regexEndSubtract","regexEndEqual","regexEndDot","num","length","setState","concat","test","char","math","toString","href","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.02306342.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Button extends React.Component {\r\n    render() {\r\n        return (\r\n            <button className=\"btn btn-secondary rounded-circle btn-lg\" onClick={(e) => this.props.onClick(this.props.digit)}>{this.props.digit}</button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nclass Operation extends React.Component {\r\n    render() {\r\n        return (\r\n            <button className=\"btn btn-info rounded-circle btn-lg\" onClick={(e) => this.props.onClick(this.props.opera)}>{this.props.opera}</button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Operation;","import React from 'react';\nimport Button from './Button';\nimport Operation from './Operation';\nimport './App.css';\nimport * as math from 'mathjs';\n\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: \"\",\n      number: \"0\"\n    };\n    this.numberConcat = this.numberConcat.bind(this);\n    this.operation = this.operation.bind(this);\n    this.subtract = this.subtract.bind(this);\n    this.zero = this.zero.bind(this);\n    this.clear = this.clear.bind(this);\n    this.equals = this.equals.bind(this);\n    this.decimal = this.decimal.bind(this);\n    this.regexEndDigit = /\\d$/;\n    this.regexNotDigit = /\\D$/;\n    this.regexEndOperation = /([-*/])$/g;\n    this.regexEndOperationSub = /([+*/])$/g;\n    this.regexEndSubtract = /([-])$/;\n    this.regexEndEqual = /([=])$/;\n    this.regexEndDot = /([.])$/;\n  }\n\n  numberConcat(num) {\n    if (this.state.number.length < 14) {\n      if (this.state.number === \"0\") {\n        this.setState((state) => ({\n          number: \"\"\n        }));\n        this.setState((state) => ({\n          count: state.count.concat(num),\n          number: state.number.concat(num)\n        }));\n      }\n      if (this.regexNotDigit.test(this.state.count) && !this.regexEndDot.test(this.state.count)) {\n        this.setState((state) => ({\n          number: \"\"\n        }));\n        this.setState((state) => ({\n          count: state.count.concat(num),\n          number: num\n        }));\n      }\n      if (this.regexEndDigit.test(this.state.count) && this.state.number !== \"0\" || this.regexEndDot.test(this.state.count)) {\n        this.setState((state) => ({\n          count: state.count.concat(num),\n          number: state.number.concat(num)\n        }));\n      }\n    }\n  }\n\n  operation(char) {\n    if (this.regexEndDigit.test(this.state.number)) {\n      this.setState((state) => ({\n        count: state.count.concat(char),\n      }));\n    }\n    if (this.regexEndEqual.test(this.state.count)) {\n      this.setState((state) => ({\n        count: state.number.concat(char),\n      }));\n    }\n    /* if (this.regexEndOperation.test(this.state.number)) {\n      const newCount = this.state.count.slice(0, -1);\n      this.setState((state) => ({\n        count: newCount.concat(char),\n      }));\n    } */\n  }\n\n  subtract() {\n    if (\n      this.regexEndDigit.test(this.state.count) ||\n      this.regexEndOperationSub.test(this.state.count)\n    ) {\n      this.setState((state) => ({\n        count: state.count.concat(\"-\"),\n      }));\n    }\n    if (this.regexEndEqual.test(this.state.count)) {\n      this.setState((state) => ({\n        count: state.number.concat(\"-\"),\n      }));\n    }\n  }\n\n  zero() {\n    if (this.regexEndDigit.test(this.state.count) && this.state.number !== \"0\") {\n      this.setState((state) => ({\n        count: state.count.concat(0),\n        number: state.number.concat(0)\n      }));\n    }\n  }\n\n  clear() {\n    this.setState((state) => ({\n      count: \"\",\n      number: \"0\"\n    }));\n  }\n\n  equals() {\n    this.setState((state) => ({\n      count: state.count.concat(\"=\"),\n      number: math.evaluate(this.state.count).toString()\n    }));\n  }\n\n  decimal() {\n    const regexDecimal = /(^\\d+$|[\\+\\-\\*\\/]\\d+$)/g;\n    if (regexDecimal.test(this.state.count)) {\n      this.setState((state) => ({\n        count: state.count.concat(\".\"),\n        number: state.number.concat(\".\")\n      }));\n    }\n    if (this.state.number === \"0\") {\n      this.setState((state) => ({\n        count: state.number.concat(\".\"),\n        number: state.number.concat(\".\")\n      }));\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container h-100 p-5 bg-light text-right\">\n        <h3>React Calculator</h3>\n        <p className=\"text-secondary\"><small>Coded by <a href=\"http://www.vinweb.hu\" className=\"text-secondary\">Janos Vincze</a></small></p>\n        <div className=\"row\">\n          <div className=\"col alert alert-info text-right pr-2\">\n            <div className=\"counter mb-2\">{this.state.count}</div>\n            <div id=\"display\">{this.state.number}</div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <button\n              id=\"clear\"\n              className=\"btn btn-danger rounded-circle btn-lg\"\n              onClick={this.clear}\n            >\n              C\n            </button>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <Button digit={\"7\"} onClick={this.numberConcat} />\n            <Button digit={\"8\"} onClick={this.numberConcat} />\n            <Button digit={\"9\"} onClick={this.numberConcat} />\n            <Operation opera={\"/\"} onClick={this.operation} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <Button digit={\"4\"} onClick={this.numberConcat} />\n            <Button digit={\"5\"} onClick={this.numberConcat} />\n            <Button digit={\"6\"} onClick={this.numberConcat} />\n            <Operation opera={\"*\"} onClick={this.operation} />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <Button digit={\"1\"} onClick={this.numberConcat} />\n            <Button digit={\"2\"} onClick={this.numberConcat} />\n            <Button digit={\"3\"} onClick={this.numberConcat} />\n            <button\n              id=\"subtract\"\n              className=\"btn btn-info rounded-circle btn-lg\"\n              onClick={this.subtract}\n            >\n              -\n            </button>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <button\n              id=\"decimal\"\n              className=\"btn btn-secondary rounded-circle btn-lg\"\n              onClick={this.decimal}\n            >\n              .\n            </button>\n            <button\n              id=\"zero\"\n              className=\"btn btn-secondary rounded-circle btn-lg\"\n              onClick={this.zero}\n            >\n              0\n            </button>\n            <button\n              id=\"equals\"\n              className=\"btn btn-success rounded-circle btn-lg\"\n              onClick={this.equals}\n            >\n              =\n            </button>\n            <Operation opera={\"+\"} onClick={this.operation} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Counter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Counter from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Counter />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}